@model DocumentRegistration.Models.DocumentModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Document", FormMethod.Post, new
{
    enctype = "multipart/form-data"
}))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>DocumentModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Process, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Process, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Process, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FilePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="PostedFile" id="PostedFile" class="InputFile" accept=".pdf, .doc, .xls, .docx, .xlsx"/>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="SubmitButton" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">

    $(document).ready(function () {

        var _validFileExtensions = [".pdf", ".doc", ".xls", ".docx", ".xlsx"];

        //Verifica se a extenção do arquivo é válida
        $("#SubmitButton").click(function (event) {

            var FileName = document.getElementById("PostedFile").value;

            if (FileName.length > 0) {
                var Valid = false;

                for (var j = 0; j < _validFileExtensions.length; j++) {
                    var CurExtension = _validFileExtensions[j];
                    if (FileName.substr(FileName.length - CurExtension.length, CurExtension.length).toLowerCase() == CurExtension.toLowerCase()) {
                        Valid = true;
                        break;
                    }
                }

                if (!Valid) {
                    event.preventDefault();

                    Swal.fire({
                        icon: 'error',
                        title: 'Documento Inválido',
                        text: "Extenções permitidas:  " + _validFileExtensions.join(", ")
                    })

                    return false;
                }
            }
            return true;
        });
    });
</script>